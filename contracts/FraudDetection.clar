(define-constant ERR_INVALID_SUBMISSION u100)
(define-constant ERR_FRAUD_DETECTED u101)
(define-constant ERR_UNAUTHORIZED u102)
(define-constant ERR_INVALID_HASH u103)
(define-constant ERR_INVALID_TIMESTAMP u104)
(define-constant ERR_INVALID_DEVICE_ID u105)
(define-constant ERR_INVALID_STEPS u106)
(define-constant ERR_INVALID_HEART_RATE u107)
(define-constant ERR_INVALID_CALORIES u108)
(define-constant ERR_INVALID_DISTANCE u109)
(define-constant ERR_INVALID_GPS_DATA u110)
(define-constant ERR_ORACLE_FAILURE u111)
(define-constant ERR_HIGH_FRAUD_SCORE u112)
(define-constant ERR_SUBMISSION_EXISTS u113)
(define-constant ERR_USER_BANNED u114)
(define-constant ERR_INVALID_FRAUD_THRESHOLD u115)
(define-constant ERR_INVALID_ANOMALY_FACTOR u116)
(define-constant ERR_INVALID_ORACLE_RESPONSE u117)
(define-constant ERR_INSUFFICIENT_DATA u118)
(define-constant ERR_MATH_OVERFLOW u119)
(define-constant ERR_INVALID_SCORE_UPDATE u120)

(define-constant MAX_STEPS_PER_DAY u50000)
(define-constant MIN_STEPS_PER_DAY u0)
(define-constant MAX_HEART_RATE u220)
(define-constant MIN_HEART_RATE u40)
(define-constant MAX_CALORIES_PER_DAY u10000)
(define-constant MIN_CALORIES_PER_DAY u0)
(define-constant MAX_DISTANCE_PER_DAY u100)
(define-constant MIN_DISTANCE_PER_DAY u0)
(define-constant FRAUD_THRESHOLD u70)
(define-constant ANOMALY_FACTOR u2)
(define-constant SCORE_DECAY_RATE u10)

(define-data-var oracle-principal principal tx-sender)
(define-data-var fraud-threshold uint FRAUD_THRESHOLD)
(define-data-var anomaly-factor uint ANOMALY_FACTOR)
(define-data-var admin-principal principal tx-sender)

(define-map submissions principal { hash: (buff 32), timestamp: uint, device-id: (buff 16), steps: uint, heart-rate: uint, calories: uint, distance: uint, gps-data: (optional (buff 64)) })
(define-map fraud-flags principal bool)
(define-map user-fraud-scores principal uint)
(define-map detection-history principal (list 10 { timestamp: uint, score: uint, flagged: bool }))
(define-map oracle-responses uint { valid: bool, reason: (string-ascii 128) })

(define-read-only (get-submission (user principal))
  (map-get? submissions user)
)

(define-read-only (get-fraud-flag (user principal))
  (default-to false (map-get? fraud-flags user))
)

(define-read-only (get-user-fraud-score (user principal))
  (default-to u0 (map-get? user-fraud-scores user))
)

(define-read-only (get-detection-history (user principal))
  (default-to (list) (map-get? detection-history user))
)

(define-read-only (get-oracle-response (response-id uint))
  (map-get? oracle-responses response-id)
)

(define-read-only (calculate-anomaly-score (steps uint) (heart-rate uint) (calories uint) (distance uint))
  (let (
    (steps-score (if (or (< steps MIN_STEPS_PER_DAY) (> steps MAX_STEPS_PER_DAY)) u20 u0))
    (hr-score (if (or (< heart-rate MIN_HEART_RATE) (> heart-rate MAX_HEART_RATE)) u20 u0))
    (cal-score (if (or (< calories MIN_CALORIES_PER_DAY) (> calories MAX_CALORIES_PER_DAY)) u20 u0))
    (dist-score (if (or (< distance MIN_DISTANCE_PER_DAY) (> distance MAX_DISTANCE_PER_DAY)) u20 u0))
    (total (+ steps-score hr-score cal-score dist-score))
  )
    (ok (* total ANOMALY_FACTOR))
  )
)

(define-private (validate-hash (hash (buff 32)))
  (if (is-eq (len hash) u32) (ok true) (err ERR_INVALID_HASH))
)

(define-private (validate-timestamp (timestamp uint))
  (if (>= timestamp block-height) (ok true) (err ERR_INVALID_TIMESTAMP))
)

(define-private (validate-device-id (device-id (buff 16)))
  (if (is-eq (len device-id) u16) (ok true) (err ERR_INVALID_DEVICE_ID))
)

(define-private (validate-steps (steps uint))
  (if (and (>= steps MIN_STEPS_PER_DAY) (<= steps MAX_STEPS_PER_DAY)) (ok true) (err ERR_INVALID_STEPS))
)

(define-private (validate-heart-rate (heart-rate uint))
  (if (and (>= heart-rate MIN_HEART_RATE) (<= heart-rate MAX_HEART_RATE)) (ok true) (err ERR_INVALID_HEART_RATE))
)

(define-private (validate-calories (calories uint))
  (if (and (>= calories MIN_CALORIES_PER_DAY) (<= calories MAX_CALORIES_PER_DAY)) (ok true) (err ERR_INVALID_CALORIES))
)

(define-private (validate-distance (distance uint))
  (if (and (>= distance MIN_DISTANCE_PER_DAY) (<= distance MAX_DISTANCE_PER_DAY)) (ok true) (err ERR_INVALID_DISTANCE))
)

(define-private (validate-gps-data (gps-data (optional (buff 64))))
  (match gps-data data (if (<= (len data) u64) (ok true) (err ERR_INVALID_GPS_DATA)) (ok true))
)

(define-private (update-fraud-score (user principal) (new-score uint))
  (let ((current-score (get-user-fraud-score user)))
    (if (<= new-score u100)
      (begin
        (map-set user-fraud-scores user (+ current-score new-score))
        (ok true)
      )
      (err ERR_INVALID_SCORE_UPDATE)
    )
  )
)

(define-private (decay-fraud-score (user principal))
  (let ((current-score (get-user-fraud-score user)))
    (if (> current-score SCORE_DECAY_RATE)
      (map-set user-fraud-scores user (- current-score SCORE_DECAY_RATE))
      (map-set user-fraud-scores user u0)
    )
    (ok true)
  )
)

(define-private (append-history (user principal) (score uint) (flagged bool))
  (let ((history (get-detection-history user)))
    (if (< (len history) u10)
      (map-set detection-history user (append history { timestamp: block-height, score: score, flagged: flagged }))
      (let ((new-history (cdr history)))
        (map-set detection-history user (append new-history { timestamp: block-height, score: score, flagged: flagged }))
      )
    )
    (ok true)
  )
)

(define-public (submit-data (hash (buff 32)) (timestamp uint) (device-id (buff 16)) (steps uint) (heart-rate uint) (calories uint) (distance uint) (gps-data (optional (buff 64))))
  (begin
    (try! (validate-hash hash))
    (try! (validate-timestamp timestamp))
    (try! (validate-device-id device-id))
    (try! (validate-steps steps))
    (try! (validate-heart-rate heart-rate))
    (try! (validate-calories calories))
    (try! (validate-distance distance))
    (try! (validate-gps-data gps-data))
    (asserts! (is-none (map-get? submissions tx-sender)) (err ERR_SUBMISSION_EXISTS))
    (asserts! (not (get-fraud-flag tx-sender)) (err ERR_USER_BANNED))
    (map-set submissions tx-sender { hash: hash, timestamp: timestamp, device-id: device-id, steps: steps, heart-rate: heart-rate, calories: calories, distance: distance, gps-data: gps-data })
    (print { event: "data-submitted", user: tx-sender })
    (ok true)
  )
)

(define-public (detect-fraud (user principal))
  (let ((submission (unwrap! (get-submission user) (err ERR_INVALID_SUBMISSION))))
    (asserts! (is-eq tx-sender (var-get admin-principal)) (err ERR_UNAUTHORIZED))
    (let ((anomaly-score (unwrap! (calculate-anomaly-score (get steps submission) (get heart-rate submission) (get calories submission) (get distance submission)) (err ERR_MATH_OVERFLOW))))
      (if (>= anomaly-score (var-get fraud-threshold))
        (begin
          (map-set fraud-flags user true)
          (try! (update-fraud-score user anomaly-score))
          (try! (append-history user anomaly-score true))
          (print { event: "fraud-detected", user: user, score: anomaly-score })
          (err ERR_FRAUD_DETECTED)
        )
        (begin
          (try! (decay-fraud-score user))
          (try! (append-history user anomaly-score false))
          (print { event: "data-validated", user: user, score: anomaly-score })
          (ok anomaly-score)
        )
      )
    )
  )
)

(define-public (process-oracle-response (response-id uint) (valid bool) (reason (string-ascii 128)))
  (begin
    (asserts! (is-eq tx-sender (var-get oracle-principal)) (err ERR_UNAUTHORIZED))
    (map-set oracle-responses response-id { valid: valid, reason: reason })
    (print { event: "oracle-response", id: response-id, valid: valid })
    (ok true)
  )
)

(define-public (set-fraud-threshold (new-threshold uint))
  (begin
    (asserts! (is-eq tx-sender (var-get admin-principal)) (err ERR_UNAUTHORIZED))
    (asserts! (and (> new-threshold u0) (<= new-threshold u100)) (err ERR_INVALID_FRAUD_THRESHOLD))
    (var-set fraud-threshold new-threshold)
    (ok true)
  )
)

(define-public (set-anomaly-factor (new-factor uint))
  (begin
    (asserts! (is-eq tx-sender (var-get admin-principal)) (err ERR_UNAUTHORIZED))
    (asserts! (> new-factor u0) (err ERR_INVALID_ANOMALY_FACTOR))
    (var-set anomaly-factor new-factor)
    (ok true)
  )
)

(define-public (ban-user (user principal))
  (begin
    (asserts! (is-eq tx-sender (var-get admin-principal)) (err ERR_UNAUTHORIZED))
    (map-set fraud-flags user true)
    (ok true)
  )
)

(define-public (unban-user (user principal))
  (begin
    (asserts! (is-eq tx-sender (var-get admin-principal)) (err ERR_UNAUTHORIZED))
    (map-delete fraud-flags user)
    (ok true)
  )
)

(define-public (set-oracle-principal (new-oracle principal))
  (begin
    (asserts! (is-eq tx-sender (var-get admin-principal)) (err ERR_UNAUTHORIZED))
    (var-set oracle-principal new-oracle)
    (ok true)
  )
)

(define-public (set-admin-principal (new-admin principal))
  (begin
    (asserts! (is-eq tx-sender (var-get admin-principal)) (err ERR_UNAUTHORIZED))
    (var-set admin-principal new-admin)
    (ok true)
  )
)